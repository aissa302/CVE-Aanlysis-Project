import json
from tqdm import tqdm
import re

CVES_PATH = "../data/CVEs/"

def load_data(file_path):
    with open(file_path, 'r') as file:
        data = json.load(file)
    return data

def search_cves(data, keywords):
    keyword_cves = {keyword: [] for keyword in keywords}

    for entry in tqdm(data.get('CVE_Items', [])):
        description = " ".join(item.get('value', '') for item in entry.get('cve', {}).get('description', {}).get('description_data', []))
        for keyword in keywords:
            if re.search(r'\b'+keyword.lower()+r'\b', description.lower()):
                keyword_cves[keyword].append(entry)

    return keyword_cves

# Replace with your list of keywords
keywords = [
    "Asus RT*", "Huawei Quidway switches", "SerVision HVG Video Gateway", "Cisco 4000 Series", "Cisco ASR", 
    "Cisco ISR", "Juniper MX Series", "Juniper ACX", "Juniper J", "Juniper M", "NETGEAR Nighthawk", "DIR-645",
    "ANTlabs InnGate", "Zhone GPON", "Zhone OLT", "Zhone ZNID", "Zhone zNID-GPON-*", "Zhone zNID-ONT-*",
    "AirLive BU-2015", "Alcatel-Lucent OmniSwitch", "Grandstream GXV3611_HD camera", "Actiontec GT784WN modems", 
    "TRENDnet WiFi Baby", "Gynoii", "Philips In.Sight", "iBaby", "Lens Peek-a-View", "Loftek CXS", "Vstarcam C7837WIP",
    "Wanscam HW0029", "Wansview","Summer Baby Zoom Wifi Monitor & Internet Viewing System", "Amazon Echo", 
    "Google Home", "Edimax", "August Doorbell", "August Smart", "Kuri Mobile", "Belkin WeMo", "Footbot Air", 
    "Nest Smoke", "Nest T3021US", "Philips Hue", "Bitdefender BOX", "Ring Doorbell", "WeMo Insight", 
    "Logitech Harmony", "Particle Photon", "NETGEAR Orbi", "Nespresso Prodigio", "Netatmo", "Samsung SmartThings", 
    "Apple Watch", "Google Cardboard", "Samsung Gear", "FreeRTOS", "Cisco Catalyst", "Cisco Nexus", "NX-OS", 
    "Cisco IOS", "D-Link", "TP-Link", "Microcontroller", "System-on-Chip", "Real-time operating system", 
    "CompactLogix", "ControlLogix", "MicroLogix", "PLC-5", "SLC 500", "Samsung Galaxy Watch Active2", 
    "Garmin Vivoactive", "Fitbit Versa", "Amazfit Bip", "Fitbit Inspire", "Xiaomi Mi Smart Band", "Huawei Band", 
    "Polar A370", "Apple AirPods", "Samsung Galaxy Buds", "Jabra Elite", "Sony WF-SP800N", "Bose SoundSport Wireless", 
    "Nest Learning Thermostat", "August Smart Lock Pro", "Amazon Echo Dot", "Google Nest Mini", "Apple HomePod Mini", 
    "Sonos One", "Bose Home Speaker", "Abbott FreeStyle Libre", "Medtronic MiniMed", "Fitbit", "Omron", 
    "Withings BPM Connect", "Neo Geo Pocket Color", "Amazon Kindle Paperwhite", "Kobo Clara HD", 
    "Barnes & Noble Nook GlowLight Plus", "PocketBook Touch Lux 5", "Onyx Boox Note Air", "samrt light", 
    "smart bulb","Amazon Fire", "Samsung Galaxy", "Onyx Boox Poke3", "Canon PowerShot SX620 HS", 
    "Sony Cyber-shot DSC-W800", "Canon PowerShot ELPH 180","Nikon COOLPIX W150", "Fujifilm FinePix XP140", 
    "Olympus Tough TG-6", "Garmin eTrex", "TomTom Go", "Magellan RoadMate 6630T-LM","Garmin DriveSmart", 
    "Rand McNally OverDryve 7 RV", "MQTT", "NanoMQ","Nexx Smart Home", "Bluetooth LE", "UART", "LoRaWAN", "ZigBee", 
    "XBee", "Modbus", "Embedded Linux", "VxWorks", "ThreadX", "RTOS", "RIOT-OS",
    "RIOT", "RIOT OS", "mbed OS", "camera", "printer", "Z-Wave", "6LoWPAN", "Thread", "MQTT-SN", "CoAP", 
    "Industrial Routers","smart meter", "smart tv", "smart phone", "smartwatch", "smart watch", "IoT Gateways", 
    "RFID Tag", "Smart Retail", "Raspberry Pi", "Arduino", "FPGA", "BeagleBone", "Programmable Logic Controller", 
    "PLC", "Variable Frequency Driver", "Robot", "CAN bus", "LIN bus","Electric Vehicle", "On-Board Diagnostics", 
    "AUTOSAR", "QNX", "Telematic Device", "SMA Solar Inverter", "Enphase Microinverter", "Power-One Solar Inverter",
    "Cisco Industrial Ethernet Switche", "Siemens RUGGEDCOM", "Moxa EDS", "Hirschmann SPIDER","GE Multilin 850", 
    "Schneider Electric Conext","DS-VFI transformer", "ABB Ability Smart Sensor", "Siemens SICAM",
    "Honeywell Elster EnergyAxis", "Kamstrup OMNIA Suite", "Sensus FlexNet","Honeywell Demand Response Thermostats", 
    "Nest Learning Thermostat", "Eaton Demand Response Controller", "ChargePoint EV", 
    "ABB Terra High Power EV Chargers", "Siemens VersiCharge EV Chargers", "GE Grid Analytics and Software Solutions", 
    "Siemens Spectrum Power","Oracle Utilities Software Solutions", "Schneider Electric EcoStruxure",
    "ABB Microgrid Plus Control System", "Siemens Siestorage", "ABB Ability e-mesh","ABB Ability Network Manager", 
    "ABB Ability Ellipse", "GE Digital Energy", "ABB Ability Symphony", 'Hyundai', 'BMW', 'Tesla', 'Jeep', 'Ford', 
    'Nissan', 'Toyota', 'Volkswagen', "General Motors", "Audi", "Mercedes-Benz", "Subaru", "Lexus", "Fiat Chrysler", 
    "automobile", "infotainment", "telematics", "connected car", "connected vehicle", "SIMATIC S7-1200", 
    "SIMATIC S7-1500", "SIMATIC S7-300", "SIMATIC S7-400", "Wind River", "Modicon M221", 'Modicon M241', 
    'Modicon M251', 'Modicon M340', 'Modicon Quantum', 'FX Series', 'L Series', 'Q Series', 'iQ-R Series', 
    'iQ-F Series', 'AC500', 'AC500-eCo', 'AC500-S', 'AC500-XC', 'CP1E', 'CP1L', 'CP1H', 'CJ2M', 'CJ2H',
    'GE Digital Energy MDS PulseNET', 'ABB PCM600', 'OneTouch Ping devices', 'ABB MicroSCADA', 'ABB CP400', 
    'AC2000', 'SDM600', 'Appliance 3000']



# Replace 'your_file_path.json' with your actual file path
keyword_cves = {}
for year in tqdm(range(2002, 2025)):
    cve_file = f"{CVES_PATH}nvdcve-1.1-{year}.json"
    data = load_data(cve_file)
    keyword_cves.update(search_cves(data, keywords))

print(keyword_cves.keys())
# Output the CVEs for each keyword
#for keyword, cves in keyword_cves.items():
#    print(f"Keyword: {len(cves)}")
#    for cve in cves:
#        cve_id = cve.get('cve', {}).get('CVE_data_meta', {}).get('ID', '')
#        print(f"CVE ID: {cve_id}")
#    print("\n")
